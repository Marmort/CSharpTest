using System;
using System.IO;
using System.Text;
using System.Reflection;

namespace ProtocolBuffers
{
    public static class CodeGenerator
    {
        /// <summary>
        /// Generate code for reading and writing protocol buffer messages
        /// </summary>
        public static void Save(Proto p, string nameSpace, string csPath)
        {

            using (TextWriter codeWriter = new StreamWriter(csPath, false, Encoding.UTF8))
            {
                codeWriter.WriteLine(@"//
//	Generated by ProtocolBuffer
//	- a pure c# code generation implementation of protocol buffers
//

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ProtocolBuffers;

namespace " + nameSpace + "\n{\n");

                foreach (var m in p.Messages)
                {
                    SaveMessage(p, m.Value, codeWriter);
                }

                codeWriter.WriteLine("}");

                //Copy ProtocolParser files contents
                string sourcePath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                ReadCode(codeWriter, Path.Combine(sourcePath, "ProtocolParser.cs"));
                ReadCode(codeWriter, Path.Combine(sourcePath, "ProtocolParserFixed.cs"));
                ReadCode(codeWriter, Path.Combine(sourcePath, "ProtocolParserKey.cs"));
                ReadCode(codeWriter, Path.Combine(sourcePath, "ProtocolParserVarInt.cs"));
            }
        }

        /// <summary>
        /// Read C# code from sourcePath and write it on code without the initial using statements.
        /// </summary>
        private static void ReadCode(TextWriter code, string sourcePath)
        {
            code.WriteLine("#region " + Path.GetFileName(sourcePath));
            foreach (string line in File.ReadAllLines(sourcePath, Encoding.UTF8))
            {
                if (line.StartsWith("using"))
                    continue;

                code.WriteLine(line);
            }
            code.WriteLine("#endregion");
        }

        private static void SaveMessage(Proto p, Message m, TextWriter codeWriter)
        {
            m.Name = ProtoPrepare.GetCamelCase(m.Name);
            //Prepare fields
            foreach (Field f in m.Fields)
            {
                ProtoPrepare.PrepareProtoType(m, f);
            }
            foreach (var e in m.Enums)
            {
                e.Value.Name = ProtoPrepare.GetCamelCase(e.Value.Name);
            }

            //Interface
            codeWriter.WriteLine("	public interface I" + m.Name + "\n	{");
            foreach (Field f in m.Fields)
            {
                if (f.Deprecated)
                    codeWriter.WriteLine("		[Obsolete]");
                if (f.ProtoType == ProtoTypes.Message)
                    codeWriter.WriteLine("		I" + f.CSType + " " + f.Name + " { get; set; }");
                else
                    codeWriter.WriteLine("		" + f.CSType + " " + f.Name + " { get; set; }");
            }
            codeWriter.WriteLine("	}\n");

            //Default class
            codeWriter.WriteLine(@"	public class " + m.Name + @" : I" + m.Name + "\n\t{");

            //Enums
            foreach (var mepair in m.Enums)
            {
                codeWriter.WriteLine("		public enum " + mepair.Value.Name + "\n		{");
                foreach (var epair in mepair.Value.Enums)
                    codeWriter.WriteLine("			" + epair.Key + " = " + epair.Value + ",");
                codeWriter.WriteLine("		}\n");
            }

            //Properties
            foreach (Field f in m.Fields)
            {
                if (f.ProtoType == ProtoTypes.Message)
                    codeWriter.WriteLine("		public I" + f.CSType + " " + f.Name + " { get; set; }");
                else
                    codeWriter.WriteLine("		public " + f.CSType + " " + f.Name + " { get; set; }");
            }

            //Constructor with default values
            codeWriter.WriteLine("\n		public " + m.Name + "()\n		{");
            foreach (Field f in m.Fields)
            {
                if (f.Rule == Rules.Repeated)
                    codeWriter.WriteLine("			this." + f.Name + " = new " + f.CSType + "();");
                if (f.Default != null)
                    codeWriter.WriteLine("			this." + f.Name + " = " + ProtoPrepare.GetCSDefaultValue(f) + ";");
            }
            codeWriter.WriteLine("		}");

            //Read
            GenerateReader(codeWriter, m);

            //Write
            GenerateWriter(codeWriter, m);

            //End of default class
            codeWriter.WriteLine("\n	}\n");

        }

        #region Protocol Reader

        static void GenerateReader(TextWriter codeWriter, Message m)
        {
            codeWriter.WriteLine("		public static I" + m.Name + " Read(Stream stream)");
            codeWriter.WriteLine("		{");
            codeWriter.WriteLine("			return Read(stream, new " + m.Name + "());");
            codeWriter.WriteLine("		}");

            codeWriter.WriteLine("		public static I" + m.Name + " Read(byte[] buffer)");
            codeWriter.WriteLine("		{");
            codeWriter.WriteLine("			using(MemoryStream ms = new MemoryStream(buffer))");
            codeWriter.WriteLine("				return Read(ms, new " + m.Name + "());");
            codeWriter.WriteLine("		}");

            codeWriter.WriteLine("		public static I" + m.Name + " Read(byte[] buffer, I" + m.Name + " instance)");
            codeWriter.WriteLine("		{");
            codeWriter.WriteLine("			if(instance == null)");
            codeWriter.WriteLine("				instance = new " + m.Name + "();");
            codeWriter.WriteLine("			using(MemoryStream ms = new MemoryStream(buffer))");
            codeWriter.WriteLine("				return Read(ms, instance);");
            codeWriter.WriteLine("		}");


            codeWriter.WriteLine("		public static I" + m.Name + " Read (Stream stream, I" + m.Name + " instance)\n		{");
            foreach (Field f in m.Fields)
            {
                if (f.WireType == Wire.Fixed32 || f.WireType == Wire.Fixed64)
                {
                    codeWriter.WriteLine("			BinaryReader br = new BinaryReader (stream);");
                    break;
                }
            }

            codeWriter.WriteLine("			while (true)");
            codeWriter.WriteLine("			{");
            codeWriter.WriteLine("				Key key = null;");
            codeWriter.WriteLine("				try {");
            codeWriter.WriteLine("					key = ProtocolParser.ReadKey (stream);");
            codeWriter.WriteLine("				} catch (InvalidDataException) {");
            codeWriter.WriteLine("					break;");
            codeWriter.WriteLine("				}");
            codeWriter.WriteLine("				");
            codeWriter.WriteLine("				switch (key.Field) {");
            foreach (Field f in m.Fields)
            {
                codeWriter.WriteLine("				case " + f.ID + ":");
                GenerateFieldReader(codeWriter, "\t\t\t\t\t", f);
                codeWriter.WriteLine("					break;");
            }
            codeWriter.WriteLine("				default:");
            codeWriter.WriteLine("					ProtocolParser.SkipKey(stream, key);");
            codeWriter.WriteLine("					break;");
            codeWriter.WriteLine("				}");
            codeWriter.WriteLine("			}");
            codeWriter.WriteLine("			return instance;");
            codeWriter.WriteLine("		}");
        }

        static void GenerateFieldReader(TextWriter codeWriter, string indent, Field f)
        {
            if (f.Rule == Rules.Repeated)
            {
                if (f.Packed == true)
                {
                    codeWriter.WriteLine(indent + "using(MemoryStream ms" + f.ID + " = new MemoryStream(ProtocolParser.ReadBytes(stream)))");
                    codeWriter.WriteLine(indent + "{");
                    codeWriter.WriteLine(indent + "	while(true)");
                    codeWriter.WriteLine(indent + "	{");
                    codeWriter.WriteLine(indent + "		if(ms" + f.ID + ".Position == ms" + f.ID + ".Length)");
                    codeWriter.WriteLine(indent + "			break;");
                    codeWriter.WriteLine(indent + "		instance." + f.Name + ".Add(" + GenerateFieldTypeReader(f, "ms" + f.ID, "br", null) + ");");
                    codeWriter.WriteLine(indent + "	}");
                    codeWriter.WriteLine(indent + "}");
                }
                else
                {
                    codeWriter.WriteLine(indent + "instance." + f.Name + ".Add(" + GenerateFieldTypeReader(f, "stream", "br", null) + ");");
                }
            }
            else
            {
                codeWriter.WriteLine(indent + "instance." + f.Name + " = " + GenerateFieldTypeReader(f, "stream", "br", "instance." + f.Name) + ";");
            }
        }

        static string GenerateFieldTypeReader(Field f, string stream, string binaryReader, string instance)
        {
            switch (f.ProtoType)
            {
                case ProtoTypes.Double:
                    return "br.ReadDouble ()";
                case ProtoTypes.Float:
                    return "br.ReadSingle ()";
                case ProtoTypes.Fixed32:
                    return "br.ReadUInt32 ()";
                case ProtoTypes.Fixed64:
                    return "br.ReadUInt64 ()";
                case ProtoTypes.Sfixed32:
                    return "br.ReadInt32 ()";
                case ProtoTypes.Sfixed64:
                    return "br.ReadInt64 ()";
                case ProtoTypes.Int32:
                    return "(int)ProtocolParser.ReadUInt32(" + stream + ")";
                case ProtoTypes.Int64:
                    return "(long)ProtocolParser.ReadUInt64(" + stream + ")";
                case ProtoTypes.Uint32:
                    return "ProtocolParser.ReadUInt32(" + stream + ")";
                case ProtoTypes.Uint64:
                    return "ProtocolParser.ReadUInt64(" + stream + ");";
                case ProtoTypes.Sint32:
                    return "ProtocolParser.ReadSInt32(" + stream + ");";
                case ProtoTypes.Sint64:
                    return "ProtocolParser.ReadSInt64(" + stream + ");";
                case ProtoTypes.Bool:
                    return "ProtocolParser.ReadBool(" + stream + ")";
                case ProtoTypes.String:
                    return "ProtocolParser.ReadString(" + stream + ")";
                case ProtoTypes.Bytes:
                    return "ProtocolParser.ReadBytes(" + stream + ")";
                case ProtoTypes.Enum:
                    return "(" + f.CSItemType + ")ProtocolParser.ReadUInt32(" + stream + ")";
                case ProtoTypes.Message:
                    if (f.Rule == Rules.Repeated)
                        return f.CSItemType + ".Read(ProtocolParser.ReadBytes(" + stream + "))";
                    else
                        return f.CSItemType + ".Read(ProtocolParser.ReadBytes(" + stream + "), " + instance + ")";
                default:
                    throw new NotImplementedException();
            }
        }

        #endregion

        #region Protocol Writer

        /// <summary>
        /// Generates code for writing a class/message
        /// </summary>
        static void GenerateWriter(TextWriter codeWriter, Message m)
        {
            codeWriter.WriteLine("		public static void Write(Stream stream, I" + m.Name + " instance)\n		{");
            GenerateBinaryWriter(codeWriter, m);

            foreach (Field f in m.Fields)
            {
                GenerateFieldWriter(codeWriter, m, f);
            }

            codeWriter.WriteLine("		}");
        }

        /// <summary>
        /// Adds BinaryWriter only if it will be used
        /// </summary>
        static void GenerateBinaryWriter(TextWriter codeWriter, Message m)
        {
            foreach (Field f in m.Fields)
            {
                if (f.WireType == Wire.Fixed32 || f.WireType == Wire.Fixed64)
                {
                    codeWriter.WriteLine("			BinaryWriter bw = new BinaryWriter(stream);");
                    return;
                }
            }
        }

        /// <summary>
        /// Generates code for writing one field
        /// </summary>
        static void GenerateFieldWriter(TextWriter codeWriter, Message m, Field f)
        {
            string indent = "			";


            if (f.Rule == Rules.Repeated)
            {
                if (f.Packed == true)
                {
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteKey(stream, new Key(" + f.ID + ", Wire." + f.WireType + "));");
                    codeWriter.WriteLine(indent + "using(MemoryStream ms" + f.ID + " = new MemoryStream())");
                    codeWriter.WriteLine(indent + "{");
                    indent += "	";
                    switch (f.ProtoType)
                    {
                        case ProtoTypes.Double:
                        case ProtoTypes.Float:
                        case ProtoTypes.Fixed32:
                        case ProtoTypes.Fixed64:
                        case ProtoTypes.Sfixed32:
                        case ProtoTypes.Sfixed64:
                            codeWriter.WriteLine(indent + "BinaryWriter bw" + f.ID + " = new BinaryWriter(ms" + f.ID + ");");
                            break;
                    }
                    codeWriter.WriteLine(indent + "foreach (" + f.CSItemType + " i" + f.ID + " in instance." + f.Name + ")");
                    codeWriter.WriteLine(indent + "{");
                    GenerateFieldTypeWriter(codeWriter, f, indent + "	", "ms" + f.ID, "bw" + f.ID, "i" + f.ID);
                    codeWriter.WriteLine(indent + "}");
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteBytes(stream, ms" + f.ID + ".ToArray());");
                    indent = indent.Substring(1);
                    codeWriter.WriteLine(indent + "}");
                }
                else
                {
                    codeWriter.WriteLine(indent + "foreach (" + f.CSItemType + " i" + f.ID + " in instance." + f.Name + ")");
                    codeWriter.WriteLine(indent + "{");
                    codeWriter.WriteLine(indent + "	ProtocolParser.WriteKey(stream, new Key(" + f.ID + ", Wire." + f.WireType + "));");
                    GenerateFieldTypeWriter(codeWriter, f, indent + "	", "stream", "bw", "i" + f.ID);
                    codeWriter.WriteLine(indent + "}");
                }
            }
            else if (f.Rule == Rules.Optional)
            {
                switch (f.ProtoType)
                {
                    case ProtoTypes.String:
                    case ProtoTypes.Message:
                    case ProtoTypes.Bytes:
                        codeWriter.WriteLine(indent + "if(instance." + f.Name + " != null)");
                        codeWriter.WriteLine(indent + "{");
                        codeWriter.WriteLine(indent + "	ProtocolParser.WriteKey(stream, new Key(" + f.ID + ", Wire." + f.WireType + "));");
                        GenerateFieldTypeWriter(codeWriter, f, indent + "	", "stream", "bw", "instance." + f.Name);
                        codeWriter.WriteLine(indent + "}");
                        break;
                    default:
                        codeWriter.WriteLine(indent + "ProtocolParser.WriteKey(stream, new Key(" + f.ID + ", Wire." + f.WireType + "));");
                        GenerateFieldTypeWriter(codeWriter, f, indent, "stream", "bw", "instance." + f.Name);
                        break;
                }
            }
            else if (f.Rule == Rules.Required)
            {
                switch (f.ProtoType)
                {
                    case ProtoTypes.String:
                    case ProtoTypes.Message:
                    case ProtoTypes.Bytes:
                        codeWriter.WriteLine(indent + "if(instance." + f.Name + " == null)");
                        codeWriter.WriteLine(indent + "	throw new ArgumentNullException(\"" + f.Name + "\", \"Required by proto specification.\");");
                        break;
                }
                codeWriter.WriteLine(indent + "ProtocolParser.WriteKey(stream, new Key(" + f.ID + ", Wire." + f.WireType + "));");
                GenerateFieldTypeWriter(codeWriter, f, indent, "stream", "bw", "instance." + f.Name);
            }

        }

        static void GenerateFieldTypeWriter(TextWriter codeWriter, Field f, string indent, string stream, string binaryWriter, string instance)
        {
            switch (f.ProtoType)
            {
                case ProtoTypes.Double:
                case ProtoTypes.Float:
                case ProtoTypes.Fixed32:
                case ProtoTypes.Fixed64:
                case ProtoTypes.Sfixed32:
                case ProtoTypes.Sfixed64:
                    codeWriter.WriteLine(indent + binaryWriter + ".Write(" + instance + ");");
                    break;
                case ProtoTypes.Int32:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteUInt32(" + stream + ", (uint)" + instance + ");");
                    break;
                case ProtoTypes.Int64:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteUInt64(" + stream + ", (ulong)" + instance + ");");
                    break;
                case ProtoTypes.Uint32:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteUInt32(" + stream + ", " + instance + ");");
                    break;
                case ProtoTypes.Uint64:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteUInt64(" + stream + ", " + instance + ");");
                    break;
                case ProtoTypes.Sint32:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteSInt32(" + stream + ", " + instance + ");");
                    break;
                case ProtoTypes.Sint64:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteSInt64(" + stream + ", " + instance + ");");
                    break;
                case ProtoTypes.Bool:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteBool(" + stream + ", " + instance + ");");
                    break;
                case ProtoTypes.String:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteString(" + stream + ", " + instance + ");");
                    break;
                case ProtoTypes.Bytes:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteBytes(" + stream + ", " + instance + ");");
                    break;
                case ProtoTypes.Enum:
                    codeWriter.WriteLine(indent + "ProtocolParser.WriteUInt32(" + stream + ", (uint)" + instance + ");");
                    break;
                case ProtoTypes.Message:
                    codeWriter.WriteLine(indent + "using(MemoryStream ms" + f.ID + " = new MemoryStream())");
                    codeWriter.WriteLine(indent + "{");
                    codeWriter.WriteLine(indent + "	" + f.CSItemType + ".Write(ms" + f.ID + ", " + instance + ");");
                    codeWriter.WriteLine(indent + "	ProtocolParser.WriteBytes(" + stream + ", ms" + f.ID + ".ToArray());");
                    codeWriter.WriteLine(indent + "}");
                    break;
                default:
                    throw new NotImplementedException();
            }
        }

        #endregion

    }
}
